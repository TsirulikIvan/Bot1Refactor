import telebot
import hashlib
from user import User
from telebot import types
from db_controller import Controller
import os
from dotenv import load_dotenv
import time
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

API_TOKEN = os.getenv('API_TOKEN2')
ctrl = Controller('base.db')
bot = telebot.TeleBot(API_TOKEN)


def create_admins_data_dict(data=('chat_id', 'pass')):
    res = {}
    tmp = ctrl.query_adm_data('admins', ','.join(data))
    for i in tmp:
        res.update([(i[0], i[1])])
    return res


admins = create_admins_data_dict()
print(admins)


def create_inline_markup(titles=('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
                         callbacks=('full_stat', 'group_stat', 'profile')):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [types.InlineKeyboardButton(text=title, callback_data=callback_data)
               for title, callback_data in zip(titles, callbacks)]
    markup.add(*buttons)
    return markup


def auth(message):
    tmp = message.from_user.id
    if tmp in admins.keys() and hashlib.sha3_256(message.text.encode()).hexdigest() == admins[tmp]:
        bot.send_message(tmp, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üòä', reply_markup=create_inline_markup())
    else:
        bot.send_message(tmp,'–í—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ —á–∏—Å–ª–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å!ü§î\n'
                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, auth)


@bot.message_handler(commands=['start'])
def first_state(message):
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n'
                                           '–ß—Ç–æ–± –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(message, auth)


@bot.message_handler(commands=['/adding_new_admin'])
def add_admin(message):
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n')


@bot.callback_query_handler(func=lambda call: True)
def handler(call):
    if call.data == 'full_stat':
        users_data = ctrl.query_all('users')


bot.polling()

